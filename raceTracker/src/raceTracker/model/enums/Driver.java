package raceTracker.model.enums;

public enum Driver {
	carlosSainz(0,"SAI"),
	peterBelousov(37,"BEL"),
	rashidNair(70,"NAI"),
	daniilKvyat(1,"KVY"),
	klimekMichalski(38,"MIC"),
	jackTremblay(71,"TRE"),
	danielRicciardo(2,"RIC"),
	santiagoMoreno(39,"MOR"),
	antonioGiovinazzi(74,"GIO"),
	kimiRaikkoenen(6,"RAI"),
	benjaminCoppens(40,"COP"),
	robertKubica(70,"KUB"),
	lewisHamilton(7,"HAM"),
	noahVisser(41,"VIS"),
	nobuharuMatsushita(78,"MAT"),
	maxVerstappen(9,"VER"),
	gertWaldmuller(42,"WAL"),
	nikitaMazepin(79,"MAZ"),
	nicoHulkenburg(10,"HUL"),
	julianQuesada(43,"QUE"),
	guanyaZhou(80,"ZHO"),
	kevinMagnussen(11,"MAG"),
	danielJones(44,"JON"),
	mickSchumacher(81,"MSC"),
	romainGrosjean(12,"GRO"),
	artemMarkelov(45,"MAR"),
	callumIlott(82,"ILL"),
	sebastianVettel(13,"VET"),
	tadasukeMakino(46,"MAK"),
	juanManuelCorrea(83,"COR"),
	sergioPerez(14,"PER"),
	seanGelael(47,"GEL"),
	jordanKing(84,"KIN"),
	valtteriBottas(15,"BOT"),
	nyckDeVries(48,"DEV"),
	mahaveerRaghunathan(85,"RAG"),
	estebanOcon(17,"OCO"),
	jackAitken(49,"AIT"),
	tatianaCalderon(86,"CAL"),
	lanceStroll(19,"STR"),
	georgeRussell(50,"RUS"),
	anthoineHubert(87,"HUB"),
	arronBarnes(20,"BAR"),
	maximilianGuenther(51,"GUE"),
	guilianoAlesi(88,"ALE"),
	martinGiles(21,"GIL"),
	nireiFukuzumi(52,"FUK"),
	ralphBoschung(89,"BOS"),
	alexMurray(22,"MUR"),
	lucaGhiotto(53,"GHI"),
	lucasRoth(23,"ROT"),
	landoNorris(54,"NOR"),
	igorCorreia(24,"COR"),
	sérgioSetteCâmara(55,"CAM"),
	sophieLevasseur(25,"LEV"),
	louisDelétraz(56,"DEL"),
	jonasSchiffer(26,"SCH"),
	antonioFuoco(57,"FUO"),
	alainForest(27,"FOR"),
	charlesLeclerc(58,"LEC"),
	jayLetourneau(28,"LET"),
	pierreGasly(59,"GAS"),
	estoSaari(29,"SAR"),
	alexanderAlbon(62,"ALB"),
	yasarAtiyeh(30,"ATI"),
	nicholasLatifi(63,"LAT"),
	callistoCalabresi(31,"CAL"),
	dorianBoccolacci(64,"BOC"),
	naotaIzum(32,"IZU"),
	nikoKari(65,"KAR"),
	howardClarke(33,"CLA"),
	robertoMerhi(66,"MER"),
	wilheimKaufmann(34,"KAU"),
	arjunMaini(67,"MAI"),
	marieLaursen(35,"LAU"),
	alessioLorandi(68,"LOR"),
	flavioNieves(36,"NIE"),
	rubenMeijer(69,"MEI"),
	human0(100,"Player"),
	human1(101,"Player"),
	human2(102,"Player"),
	human3(103,"Player"),
	human4(104,"Player"),
	human5(105,"Player"),
	human6(106,"Player"),
	human7(107,"Player"),
	human8(108,"Player"),
	human9(109,"Player"),
	human10(110,"Player"),
	human11(111,"Player"),
	human12(112,"Player"),
	human13(113,"Player"),
	human14(114,"Player"),
	human15(115,"Player"),
	human16(116,"Player"),
	human17(117,"Player"),
	human18(118,"Player"),
	human19(119,"Player"),
	human20(120,"Player"),
	human21(121,"Player"),
	human22(122,"Player"),
	human23(123,"Player"),
	human24(124,"Player"),
	human25(125,"Player"),
	human26(126,"Player"),
	human27(127,"Player"),
	human28(128,"Player"),
	human29(129,"Player"),
	human30(130,"Player"),
	human31(131,"Player"),
	human32(132,"Player"),
	human33(133,"Player"),
	human34(134,"Player"),
	human35(135,"Player"),
	human36(136,"Player"),
	human37(137,"Player"),
	human38(138,"Player"),
	human39(139,"Player"),
	human40(140,"Player"),
	human41(141,"Player"),
	human42(142,"Player"),
	human43(143,"Player"),
	human44(144,"Player"),
	human45(145,"Player"),
	human46(146,"Player"),
	human47(147,"Player"),
	human48(148,"Player"),
	human49(149,"Player"),
	human50(150,"Player"),
	human51(151,"Player"),
	human52(152,"Player"),
	human53(153,"Player"),
	human54(154,"Player"),
	human55(155,"Player"),
	human56(156,"Player"),
	human57(157,"Player"),
	human58(158,"Player"),
	human59(159,"Player"),
	human60(160,"Player"),
	human61(161,"Player"),
	human62(162,"Player"),
	human63(163,"Player"),
	human64(164,"Player"),
	human65(165,"Player"),
	human66(166,"Player"),
	human67(167,"Player"),
	human68(168,"Player"),
	human69(169,"Player"),
	human70(170,"Player"),
	human71(171,"Player"),
	human72(172,"Player"),
	human73(173,"Player"),
	human74(174,"Player"),
	human75(175,"Player"),
	human76(176,"Player"),
	human77(177,"Player"),
	human78(178,"Player"),
	human79(179,"Player"),
	human80(180,"Player"),
	human81(181,"Player"),
	human82(182,"Player"),
	human83(183,"Player"),
	human84(184,"Player"),
	human85(185,"Player"),
	human86(186,"Player"),
	human87(187,"Player"),
	human88(188,"Player"),
	human89(189,"Player"),
	human90(190,"Player"),
	human91(191,"Player"),
	human92(192,"Player"),
	human93(193,"Player"),
	human94(194,"Player"),
	human95(195,"Player"),
	human96(196,"Player"),
	human97(197,"Player"),
	human98(198,"Player"),
	human99(199,"Player");
	

	private final int driverKey;
	private final String shortName;

	private Driver(int aDriverKey,String shortName) {
		this.driverKey = aDriverKey;
		this.shortName=shortName;
	}
	
	public static Driver getTypeByKey(int aKey) {
		for (Driver aType : Driver.values()) {
			if (aType.driverKey == aKey)
				return aType;
		}
		throw new IllegalArgumentException("No type entry found for " + aKey);
	}
	
	public String getShortName() {
		return shortName;
	}
}
